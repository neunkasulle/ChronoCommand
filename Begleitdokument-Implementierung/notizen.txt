model
  --Administrator
  --Supervisor
  --Proletarier
  category 
  categoryDAO
    addCategory -> saveCategory, void
    ++findCategoryByString(String: string): Category
  ++DAOHelper
    ++startup
    ++shutdown
    ++getSessionFactory:SessionFactory
  (ChonoCommandException)
  GermanLawRegulations
    checkMaxArbeitszeit ->  checkWorkHours
    checkPausezeit -> checkForPause
    --checkRuhezeit
    checkNachtarbeit -> checkNightWork
    checkFeiertagsruhe -> checkSundayWork
  Message
    --isDraft
    [ --id:int, --sendTime:Time{readonly}, --receiveTime:Time, --content:String{readonly}, --sender:User{readonly}, --recipient:User{readonly}, --isRead:bool, --isDraft:bool ||]
  --MessageDAO

  ++Reason:Enum
    ++toString():String
    [ +text:String ||]
  Regulations
    --loadHolidays (kommt in GermanLawRegulations)
    --loadRestrictedTimes
    --loadTimeRestrictions
  Role
    Enum -> class
    [ +id:Long{readonly}, +name:String, +description:String, +permission:Set<String> |]
  --Session
    (maybe deleted cause shiro)
  TimeRecord

  TimeSheet
    hoursPerMonth -> requiredHoursPerMonth
    --addTime
    --checkHourLimit (ist in GermanLawRegulations)
    [ -proletarier:Proletarier{readonly}, +user:User{readonly}, +messages:List<Messages>, +currentMinutesThisMonth:int ||]
  TimeSheetDAO
    getTimeSheet(...) -> (month:Month,year:int, user:User) 
    addTimeSheet -> saveTimeSheet
    ++getTimeRecordsByDay(timeSheet:TimeSheet, dayOfMonth:int):List<TimeRecord>
    ++saveTimeSheet(TimeSheet):void
    ++getAllTimeSheets(month:Month, year:int):List<TimeRecord>
    ++getTimeSheetsFromUser(user:User):List<TimeRecord>
    ++getLatestTimeRecord(user:User):TimeRecord
    ++getLatsetTimeSheet(user:User):TimeSheet
  TimeSheetExporter -> TimeSheetHandler
      --createEmails
      ++splitRecordList(List<TimeRecord>):List
      ++fillContent(PDPageContentStream, List<TimeRecord>, TimeSheet)
      [ +id:Long{readonly}, +FONT:PDType1Font{static}, +FONT_BOLD:PDType1Font{static}, +sumHour:int{private}, +sumMin:int{private}
  User
      ++ +String:realName
      ++ +User:supervisor
      ++ +int:hoursPerMonth
      all above durch die auflösung von "protelarier" in user gewandert
      ++isPermitted(String):bool
      ++getPrimaryRole:Role
      [ +mailFlag:bool, +isDisabled:bool, +salt:String ||]
  --UserDAO
(     addUser -> saveUser
      --deleteUser
      ++findUserByEmail(email:String):List<User>
      ++saveRole(role:Role)
      ++getRoleByName(name:String):Role
)
control
  --Control
  CreateUserControl
      createUser(...) -> (userType:Role, username:String, realname:String, email:String, passwort:String, supervisor:User, hoursPerMonth:int)
      --showErrorMessage
  LoginControl
      ++logout
      ++isLoggedIn
      ++getCurrentUser
      --hash
  MainControl
      ++isInitialStartup():bool
  ++MonthlyReminder
  RegulationControl
      --checkTimeSheet(timeSheet:TimeSheet)
      checkTimeSheets() -> (List<TimeSheet>)
      --checkHolidays(timeSheets:List):Stack
      --checkRestricted(timeSheets:List):Stack
      --checkTimeSheetRestrictions(timeSheets:List):Stack
      --checkTimeSheetLimits(timeSheets:List):Stack
      --generalWarnings(userStack:Stack)
      --readInRegulation(file:File):Regulations
      [ -localRegulations:Regulations, +warnedUsers:Deque<User> ||]
  ReminderControl
  Timer -> SchedulerHandler
      ++intantiateSched
      ++scheduleAll
      ++shutdownSched
      [ +sched:Scheduler ||]
  StatisticControl
  TimeSheetControl
      newTimeRecord():bool -> (user:User):TimeRecord
      newTimeRecord(...) -> (category:Category, description:String, user:User):TimeRecord
      closeTimeRecord():bool -> (user:User):TimeRecord
      closeTimeRecord(...) -> (category:Category, description:String, user:User):TimeRecord
      ++getLatestTimeRecord(user:User):TimeRecord
      addTimeToTimeSheet(time:Zeit) -> (beginn:LocalDateTime, end:LocalDateTime, category:Category, description:String, user:User)
%      --getSupervisedTimeSheets(month:int, year:int)
      lockTimeSheet(...):bool -> (timeSheet:TimeSheet, user:User)
      unlockTimeSheet(...):bool -> (timeSheet:TimeSheet, user:User)
      approveTimeSheet(...):bool -> (timeSheet:TimeSheet, user:User)
      --filtersChanged
      printCheckedTimeSheets(month:int, year:int):pdf -> (month:int):File
      printAllTimeSheets(month:int, year:int):pdf -> (month:int):File
      printTimeSheet(timeSheet:TimeSheet):pdf -> :File
      printAllTimeSheets(proletarier:Proletarier):pdf -> (user:User):File
      ++getAllCategories:List<Category>
      getTimeSheet(month:int, year:int):TimeSheet -> (month:int):List<TimeSheet>
      ++getTimeSheetsFromUser(user:User):List<TimeSheet>
      ++getCurrentMinutes(timeRecords:TimeRecords[]):int
      ++editTimeRecord(timeRecord:TimeRecord)
      ++assMessageToTimeSheet(timeSheet:TimeSheet, message:Message)
      ++getMessageFromTimeSheet(timeSheet:TimeSheet):List<Message>
      ++sendEmail(recipient:User, message:String
  UserManagementControl
      --addUser()
      --createUser(userType:Role, name:String, email:String, passwort:String, supervisor:Supervisor, hoursPerMonth:int):bool
      --removeUser
      editUser() -> (user:User, username:String, realname:String, email:String, passwort:String)
      getUser(sessionID:int):User -> findUser(username:String):User
      ++getUserByRole(role:Role):List<User>
      ++getUsersBySupervisor(supervisor:User):List<User>
      ++getAllUsers:List<User>
      ++createInitialAdministrator(username:String, email:String, password:String, realname:String)
      ++getAllRoles:List<Role>
      ++getRoleByName(roleName:String):Role
  ++WeeklyMailJob
      ++execute
      ++checkUserLastrecord:List<User>
view
  ++AdminView
      ++refreshContacts
      [ +beanItemContainer:BeanItemContainer<User>, +recordList:Grid, +form:AdminCtrlForm ||]
  ++BaseView
      ++enter(event:ViewChangeEvent)
      ++logoutClicked(event:ClickEvent)
      ++menuClicked
      ++inboxClicked
      ++showErrorMessage(message:String)
      ++showErrorMessage
      ++buttonClick(event:ClickEvent)
  CreateUserView
  DiagrammMagic
  ++ErrorView
      ++enter(event:ViewChangeEvent)
  InitialStartupView
      ++enter(event:ViewChangeEvent)
  ++LocalDateTimeToLocalTimeStringConverter
      [ +propertyId:Object ||]
  LoginView
      --clickSendMessage
      --clickSaveDraft
      ++loginClicked(event:LoginEvent)
      ++forgotPasswortClicked(event:ClickEvent)
      ++enter(event:ViewChangeEvent)
      [ +rememberMe:CheckBox, +authInfoMissing:Label, +authenticationFailed:Label, +passwortField:PasswortField ||]
  MainView -> MainUI
  --MessageView
  ++SupervisorView
      ++refreshSupervisedUsers
      [ +beanItemContainer:BeanItemContainer<User>, +recordList:Grid, +form:SupervisorCtrlForm ||]
  TimeElements
  ++TimeRecordView
      ++refreshTimeRecords
      ++updateHeaderLabel
      [ +beanItemContainer:BeanItemContainer<TimeRecord>, +recordList:Grid, +header:Label, +startButton:Button, +stopButton:Button, +elapsedTime:Label, +form:TimeRecordForm ||]
  TimeSheetView
      --filtersChanged
      --showTimeSheet
      ++refreshTimeSheets
      [ +beanItemContainer:BeanItemContainer<TimeSheet>, +recordList:Grid, +form:TimeSheetForm ||]
  UserSettingsView
  --View{abstract}
++view.forms
  ++AdminCtrlForm
  ++SupervisorCtrlForm
  ++TimeRecordForm
  ++TimeSheetForm
++security
  ++Realm
      ++doGetAuthenticationInfo(authcToken:AuthenticationToken)
      ++doGetAuthorizationInfo(principals:PrincipalCollection)